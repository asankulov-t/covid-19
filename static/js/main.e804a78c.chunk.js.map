{"version":3,"sources":["InfoBox.jsx","Table.jsx","util.js","LineGraph.jsx","Map.jsx","App.js","index.js"],"names":["InfoBox","title","isRed","active","cases","total","onClick","className","color","Table","countries","map","country","numeral","format","casesTypeColors","hex","multiplier","recovered","deaths","sortDate","data","sort","a","b","prettyPrintStat","stat","showDataOnMap","casesType","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetchData","fetch","then","response","json","console","log","length","datasets","backgroundColor","borderColor","Map","zoom","TileLayer","url","attribution","App","setCountry","setCountries","setCountryInfo","tableData","setTableDate","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","res","getCountries","name","iso2","sortedData","onChangeCountry","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e804a78c.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from \"@material-ui/core/Card/Card\";\r\nimport Typography from \"@material-ui/core/Typography/Typography\";\r\nimport CardContent from \"@material-ui/core/CardContent/CardContent\";\r\nimport './InfoBox.css'\r\nconst InfoBox = ({title,isRed, active, cases, total, onClick}) => {\r\n    return (\r\n        <Card onClick={onClick} className={`infoBox ${active && \"infobox--selected\"} ${isRed && \"infobox--red\"} `}>\r\n            <CardContent>\r\n                <Typography className='infoBox__title' color='textSecondary'>\r\n                    {title}\r\n                </Typography>\r\n                <h3 className={`infoBox__cases ${!isRed && 'infobox--cases--green'}`}>{cases}</h3>\r\n                <Typography className='infoBox__title' color='textSecondary'>\r\n                    {total} total\r\n                </Typography>\r\n            </CardContent>\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default InfoBox;","import React from 'react';\r\nimport './Table.css';\r\nimport numeral from 'numeral';\r\nconst Table = ({countries}) => {\r\n    return (\r\n        <div className={'table'}>\r\n            {countries.map(({country, cases})=>(\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Table;","import React from \"react\";\r\nimport numeral from 'numeral';\r\nimport {Circle, Popup} from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        multiplier: 800,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: \"#070707\",\r\n        multiplier: 2000,\r\n    },\r\n};\r\n\r\nexport const sortDate=(data)=>{\r\n    const sortedData=[...data];\r\n    return sortedData.sort((a,b)=>a.cases>b.cases?-1:1)\r\n}\r\nexport const prettyPrintStat=(stat)=> stat?`+${numeral(stat).format(\"0.0a\")}`:+0;\r\n\r\nexport const showDataOnMap=(data,casesType='cases')=>(\r\n    data.map(country=>(\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            fillOpacity={0.4}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n            }\r\n        >\r\n\r\n            <Popup>\r\n                <div className={\"info-container\"}>\r\n                    <div\r\n                    className={\"info_flag\"}\r\n                    style={{backgroundImage:`url(${country.countryInfo.flag})` }}\r\n                    />\r\n                    <div className={\"info-name\"}>{country.country}</div>\r\n                    <div className={\"info-confirmed\"}>Cases:{numeral(country.cases).format('0,0')}</div>\r\n                    <div className={\"info-recovered\"}>Recovered:{numeral(country.recovered).format('0,0')}</div>\r\n                    <div className={\"info-dead\"}>Deaths:{numeral(country.deaths).format('0,0')}</div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ))\r\n)","import React, { useState, useEffect } from \"react\";\r\nimport numeral from \"numeral\";\r\nimport './LineGraph.css'\r\nimport {Line} from \"react-chartjs-2\";\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    callback: function (value, index, values) {\r\n                        return  numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n    for (let date in data.cases) {\r\n        if (lastDataPoint) {\r\n            let newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint,\r\n            };\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType }) {\r\n    const [data, setData] = useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=30\")\r\n                .then((response) => {\r\n                    return response.json();\r\n                })\r\n                .then((data) => {\r\n                    let chartData = buildChartData(data, casesType);\r\n                    setData(chartData);\r\n                    console.log(chartData);\r\n                    // buildChart(chartData);\r\n                });\r\n        };\r\n\r\n        fetchData();\r\n    }, [casesType]);\r\n\r\n    return (\r\n        <div className={'graph'}>\r\n\r\n            {data?.length > 0 && (\r\n                <Line\r\n                    options={options}\r\n\r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                                borderColor: \"#CC1034\",\r\n                                data: data,\r\n                            },\r\n                        ],\r\n                    }}\r\n\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LineGraph;","import React from 'react';\r\nimport {Map as LeafletMap, TileLayer} from \"react-leaflet\";\r\nimport './Map.css';\r\nimport {showDataOnMap} from \"./util\";\r\n\r\nconst Map = ({countries,casesType, center, zoom}) => {\r\n    return (\r\n        <div className={'map'}>\r\n            <LeafletMap center={center} zoom={zoom} >\r\n                <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                           attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' />\r\n                {showDataOnMap(countries,casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Map;","import './App.css';\n\nimport {useEffect, useState} from \"react\";\nimport InfoBox from \"./InfoBox\";\nimport Card from \"@material-ui/core/Card/Card\";\nimport Table from \"./Table\";\nimport CardContent from \"@material-ui/core/CardContent/CardContent\";\nimport {prettyPrintStat, sortDate} from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\"\n\nfunction App() {\n\n    const [country, setCountry]=useState('Worldwide')\n    const [countries, setCountries]=useState([]);\n    const [countryInfo, setCountryInfo]=useState([])\n    const [tableData,setTableDate]=useState([])\n    const [casesType, setCasesType] = useState(\"cases\");\n    const [mapCenter, setMapCenter]=useState({lat:34.80764, lng:-40.4796});\n    const [mapZoom,setMapZoom]=useState(3)\n    const [mapCountries, setMapCountries]=useState([])\n\n    useEffect( ()=>{\n        fetch('https://disease.sh/v3/covid-19/all').then(res=>res.json()).then((data)=>{\n            setCountryInfo(data)\n        })\n    },[])\n\n    useEffect(()=>{\n        const getCountries=async()=>{\n            fetch('https://disease.sh/v3/covid-19/countries').then((response)=>response.json())\n                .then((data)=>{\n                    const countries=data.map((country)=>(\n                        {\n                            name:country.country,\n                            value:country.countryInfo.iso2\n                        }\n                    ));\n                    const sortedData=sortDate(data)\n                    setTableDate(sortedData)\n                    setMapCountries(data)\n                    setCountries(countries)\n                    console.log(countries)\n                })\n        }\n                getCountries()\n    },[])\n\n    //https://disease.sh/v3/covid-19/countries\n\n\n    const onChangeCountry=async (event)=>{\n        const countryCode=event.target.value;\n        const url=countryCode==='Worldwide'?'https://disease.sh/v3/covid-19/all':`https://disease.sh/v3/covid-19/countries/${countryCode}`;\n        await fetch(url).then(response=>response.json()).then(data=>{\n            setCountry(countryCode)\n            setCountryInfo(data)\n            setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n            setMapZoom(4)\n        })\n    }\n\n  return (\n    <div className=\"App\">\n        <div className=\"app__left\">\n            <div className=\"app__header\">\n                <h1>COVID-19 TRACKER</h1>\n                <FormControl>\n                    <Select variant = \"outlined\" onChange={onChangeCountry} value={country}>\n                        <MenuItem value='Worldwide'>Worldwide</MenuItem>\n                        {countries.map((country)=>(\n                            <MenuItem value={country.value}>{country.name}</MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n            </div>\n            <div className=\"app__stats\">\n                <InfoBox isRed active={casesType==='cases'} onClick={(e)=>setCasesType('cases')} title='Coronavirus Cases' cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)}/>\n                <InfoBox active={casesType==='recovered'} onClick={(e)=>setCasesType(\"recovered\")} title='Recovered' cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)}/>\n                <InfoBox isRed active={casesType==='deaths'} onClick={(e)=>setCasesType(\"deaths\")}title='Deaths' cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)}/>\n            </div>\n            <Map casesType={casesType} center={mapCenter}  zoom={mapZoom} countries={mapCountries}/>\n            {/* {Map} */}\n        </div>\n        <Card className=\"app__right\">\n            <CardContent>\n                <h3>Live Cases by Country</h3>\n                <Table countries={tableData}/>\n                <h3>Worldwide new {casesType}</h3>\n                <LineGraph casesType={casesType}/>\n            </CardContent>\n\n            {/* {Graph} */}\n        </Card>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nReactDOM.render(\n\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}